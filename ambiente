import pygame
import sys
import tkinter as tk
import random
import json

# Configurações iniciais
largura = 28
altura = 21
tamanho_celula = 20
intervalo_atualizacao = 100  # Milissegundos
pontuacao = 0
game_over_flag = False  # Flag para controlar o estado de fim de jogo
nome_jogador = ""  # Nome do jogador para o rank

# Inicialização da janela
janela = tk.Tk()
janela.title("Jogo da Cobrinha")
janela.geometry(f"{largura * tamanho_celula}x{altura * tamanho_celula}")

# Inicialização da cobra
cobra = [(largura // 2, altura // 2)]
direcao = (0, -1)  # Começa indo para cima

# Função para gerar comida em uma posição aleatória
def gerar_comida():
    while True:
        x, y = random.randint(0, largura - 1), random.randint(0, altura - 1)
        if (x, y) not in cobra:
            return x, y

comida = gerar_comida()

# Inicialização do Pygame
pygame.init()

# Definições da tela
WIDTH, HEIGHT = 560, 425
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Jogo da Cobrinha")

# Cores
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
GREEND = (0, 128, 0)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
GREY = (128, 128, 128)
PURPLE = (128, 0, 128)

# Função para criar botões
def create_button(rect, color, text, text_color):
    font = pygame.font.Font(None, 36)  # Use a fonte padrão do pygame
    button_surface = pygame.Surface((rect.width, rect.height))
    button_surface.fill(color)
    text_surface = font.render(text, True, text_color)
    text_rect = text_surface.get_rect()
    text_rect.center = button_surface.get_rect().center
    button_surface.blit(text_surface, text_rect)
    return button_surface, rect

# Função para carregar as pontuações do arquivo JSON
def carregar_pontuacoes():
    try:
        with open("pontuacoes.json", "r") as arquivo:
            pontuacoes = json.load(arquivo)
            return pontuacoes
    except FileNotFoundError:
        return []

# Função para salvar as pontuações no arquivo JSON
def salvar_pontuacoes(pontuacoes):
    with open("pontuacoes.json", "w") as arquivo:
        json.dump(pontuacoes, arquivo)

# Função do jogo da cobrinha
def snake_game():

    global game_over_flag
    global nome_jogador

    # Função para atualizar o jogo
    def atualizar_jogo():
        global game_over_flag
        global cobra, direcao, comida, pontuacao

        if game_over_flag:
            return

        # Mover a cobra na direção atual
        x, y = cobra[0]
        novo_x = (x + direcao[0]) % largura
        novo_y = (y + direcao[1]) % altura

        # Verificar se a cobra colidiu com a parede ou com ela mesma
        if (novo_x, novo_y) in cobra or novo_x < 0 or novo_x >= largura or novo_y < 0 or novo_y >= altura:
            game_over()
            return

        cobra.insert(0, (novo_x, novo_y))

        # Verificar se a cobra comeu a comida
        if (novo_x, novo_y) == comida:
            pontuacao += 1
            comida = gerar_comida()
        else:
            cobra.pop()

        # Redesenhar a tela
        screen.fill(BLACK)
        for x, y in cobra:
            pygame.draw.rect(screen, PURPLE, pygame.Rect(x * tamanho_celula, y * tamanho_celula,
                                                        tamanho_celula, tamanho_celula))
        cx, cy = comida
        pygame.draw.ellipse(screen, GREEND, pygame.Rect(cx * tamanho_celula, cy * tamanho_celula,
                                                     tamanho_celula, tamanho_celula))

        # Atualizar a pontuação
        font = pygame.font.Font(None, 36)  # Use a fonte padrão do pygame
        pontuacao_text = font.render(f"Pontuação: {pontuacao}", True, GREY)
        screen.blit(pontuacao_text, (10, 10))

        pygame.display.flip()

        # Agendar a próxima atualização
        pygame.time.set_timer(pygame.USEREVENT, intervalo_atualizacao)

    # Função para lidar com o fim do jogo
    def game_over():
        global game_over_flag
        global nome_jogador
        font = pygame.font.Font(None, 32)  # Use a fonte padrão do pygame
        game_over_text = font.render(f"Fim de Jogo! Pontuação: {pontuacao}", True, GREY)
        game_over_rect = game_over_text.get_rect()
        game_over_rect.center = (WIDTH // 2, HEIGHT // 4)
        screen.blit(game_over_text, game_over_rect.topleft)

        # Caixa de entrada para o nome do jogador
        nome_entry = pygame.Rect(150, 200, 300, 40)
        pygame.draw.rect(screen, WHITE, nome_entry, 2)

        # Botão para salvar a pontuação
        salvar_button, salvar_button_rect = create_button(pygame.Rect(220, 250, 160, 60), GREEN, "Salvar", BLACK)
        screen.blit(salvar_button, salvar_button_rect.topleft)

        pygame.display.flip()

        nome_digitado = ""
        nome_digitado_flag = True

        while nome_digitado_flag:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:
                        if salvar_button_rect.collidepoint(event.pos):
                            if nome_digitado:
                                nome_jogador = nome_digitado
                                salvar_pontuacao(pontuacao)
                                game_over_flag = False
                                reset_game()
                                return
                        elif nome_entry.collidepoint(event.pos):
                            nome_digitado_flag = True
                        else:
                            nome_digitado_flag = False
                    elif event.button == 3:
                        nome_digitado_flag = False
                elif event.type == pygame.KEYDOWN:
                    if nome_digitado_flag:
                        if event.key == pygame.K_BACKSPACE:
                            nome_digitado = nome_digitado[:-1]
                        elif event.key == pygame.K_RETURN:
                            if nome_digitado:
                                nome_jogador = nome_digitado
                                salvar_pontuacao(pontuacao)
                                game_over_flag = False
                                reset_game()
                                return
                        else:
                            nome_digitado += event.unicode

    # Função para resetar o jogo
    def reset_game():
        global cobra, direcao, comida, pontuacao
        cobra = [(largura // 2, altura // 2)]
        direcao = (0, -1)
        comida = gerar_comida()
        pontuacao = 0

    # Função para mudar a direção da cobra
    def mudar_direcao(event):
        global direcao
        if event.key == pygame.K_UP and direcao != (0, 1):
            direcao = (0, -1)
        elif event.key == pygame.K_DOWN and direcao != (0, -1):
            direcao = (0, 1)
        elif event.key == pygame.K_LEFT and direcao != (1, 0):
            direcao = (-1, 0)
        elif event.key == pygame.K_RIGHT and direcao != (-1, 0):
            direcao = (1, 0)

    # Iniciar o jogo
    reset_game()
    pygame.time.set_timer(pygame.USEREVENT, intervalo_atualizacao)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.USEREVENT:
                atualizar_jogo()
            elif event.type == pygame.KEYDOWN:
                mudar_direcao(event)

# Função para criar e executar o menu
def main_menu():
    clock = pygame.time.Clock()
    running = True

    # Criação dos botões fora do loop principal
    play_button, play_button_rect = create_button(pygame.Rect(170, 80, 240, 80), GREEN, "JOGAR", BLACK)
    rank_button, rank_button_rect = create_button(pygame.Rect(170, 180, 240, 80), YELLOW, "RANK", BLACK)
    quit_button, quit_button_rect = create_button(pygame.Rect(170, 280, 240, 80), RED, "SAIR", BLACK)

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    if play_button_rect.collidepoint(event.pos):
                        print("Botão Jogar pressionado")
                        snake_game()
                    elif rank_button_rect.collidepoint(event.pos):
                        print("Botão Rank pressionado")
                        mostrar_rank()
                    elif quit_button_rect.collidepoint(event.pos):
                        print("Botão Sair pressionado")
                        pygame.quit()
                        sys.exit()

        screen.fill(BLACK)
        screen.blit(play_button, play_button_rect.topleft)
        screen.blit(rank_button, rank_button_rect.topleft)
        screen.blit(quit_button, quit_button_rect.topleft)
        pygame.display.flip()
        clock.tick(30)

# Função para mostrar o rank
def mostrar_rank():
    clock = pygame.time.Clock()
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        screen.fill(BLACK)
        font = pygame.font.Font(None, 36)
        titulo_text = font.render("Rank de Pontuações", True, WHITE)
        screen.blit(titulo_text, (150, 20))

        pontuacoes = carregar_pontuacoes()
        if pontuacoes:
            pontuacoes.sort(reverse=True, key=lambda x: x["pontuacao"])
            y = 80
            for i, pontuacao in enumerate(pontuacoes[:5]):
                texto = f"{i + 1}. {pontuacao['nome']} - {pontuacao['pontuacao']}"
                pontuacao_text = font.render(texto, True, WHITE)
                screen.blit(pontuacao_text, (150, y))
                y += 40

        pygame.display.flip()

if __name__ == "__main__":
    main_menu()
